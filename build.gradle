import org.gradle.api.tasks.options.Option

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
    id "edu.wpi.first.GradleRIO" version "2019.1.1"
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'maven'
    id 'org.jetbrains.dokka' version '0.9.17'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api 'org.jetbrains.kotlin:kotlin-stdlib:1.3.0'
    api 'org.jetbrains.kotlin:kotlin-reflect:1.3.0'

    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.42-beta'
    testCompile 'org.powermock:powermock-module-junit4:1.6.6'
    testCompile 'org.powermock:powermock-api-mockito2:1.6.6'

}

group = 'org.team5499'
version = '2.4.0'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/htmldoc"
}

test {
    dependsOn 'cleanTest'

    useJUnit()

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
        showStandardStreams true
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

jacoco {
    toolVersion = '0.8.2'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

task tox {
    doLast {
        exec {
            executable 'tox'
        }
    }
}

test.finalizedBy 'tox'
task install_hooks(dependsOn: 'tox')


publishing {
    publications {
        library(MavenPublication) {
            artifactId = 'monkey-lib'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'MonkeyLib'
                description = 'Commonly used utilities in FRC Team 5499\'s codebase'
                url = 'https://github.com/team5499/MonkeyLib'
            }
        }
    }
    repositories {
        maven{

        }
    }
}

class PublishToMavenRepositoryWithCreds extends PublishToMavenRepository {
    @Option(option="username", description="username of the user")
    public String username

    void setUsername(String username) {
        this.username = username
    }

    String getUsername() {
        return this.username
    }

    @Option(option="password", description="password of the user")
    public String password

    void setPassword(String password) {
        this.password = password
    }

    String getPassword() {
        return this.password
    }

    @Option(option="url", description="url to deploy to")
    public String url

    void setUrl(String url) {
        this.url = url
    }

    String getUrl() {
        return this.url
    }

}

task publishToTeamRepo(type: PublishToMavenRepositoryWithCreds) {
    doFirst {
        publishing.repositories.maven.credentials.username = username
        publishing.repositories.maven.credentials.password = password
        publishing.repositories.maven.url = url
    }
    publication = publishing.publications.library
    repository = publishing.repositories.maven
}
